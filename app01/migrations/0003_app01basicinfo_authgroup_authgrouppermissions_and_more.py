# Generated by Django 5.0.3 on 2024-03-08 05:10

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app01', '0002_user_info_enterprise_name_user_info_permission'),
    ]

    operations = [
        migrations.CreateModel(
            name='App01BasicInfo',
            fields=[
                ('桥梁id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('定期检查时间', models.TextField(blank=True, null=True)),
                ('工作时间', models.IntegerField(blank=True, null=True)),
                ('年日均交通量', models.IntegerField(blank=True, null=True)),
                ('建成时间', models.TextField(blank=True, null=True)),
                ('上下行', models.IntegerField(blank=True, null=True)),
                ('是否预应力桥梁', models.IntegerField(blank=True, null=True)),
                ('上传用户', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'app01_basic_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BeamBaseplateConcreteCracking',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('梁体底板混凝土破损跨径', models.IntegerField(blank=True, null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均面积_m2_field', models.FloatField(blank=True, db_column='平均面积(m2)', null=True)),
                ('总面积_m2_field', models.FloatField(blank=True, db_column='总面积(m2)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大面积_m2_field', models.FloatField(blank=True, db_column='最大面积(m2)', null=True)),
            ],
            options={
                'db_table': 'beam baseplate concrete cracking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BeamBaseplateXCracking',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('梁体底板横向裂缝跨径', models.IntegerField(blank=True, null=True)),
                ('宽度总和_mm_field', models.FloatField(blank=True, db_column='宽度总和(mm)', null=True)),
                ('平均宽度_mm_field', models.FloatField(blank=True, db_column='平均宽度(mm)', null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均长度_cm_field', models.FloatField(blank=True, db_column='平均长度(cm)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大宽度_mm_field', models.FloatField(blank=True, db_column='最大宽度(mm)', null=True)),
                ('最大长度占比', models.FloatField(blank=True, null=True)),
                ('每延米数量', models.FloatField(blank=True, null=True)),
                ('长度总和_cm_field', models.FloatField(blank=True, db_column='长度总和(cm)', null=True)),
            ],
            options={
                'db_table': 'beam baseplate x cracking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BeamBaseplateYCracking',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('梁体底板纵向裂缝跨径', models.IntegerField(blank=True, null=True)),
                ('宽度总和_mm_field', models.FloatField(blank=True, db_column='宽度总和(mm)', null=True)),
                ('平均宽度_mm_field', models.FloatField(blank=True, db_column='平均宽度(mm)', null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均长度_cm_field', models.FloatField(blank=True, db_column='平均长度(cm)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大宽度_mm_field', models.FloatField(blank=True, db_column='最大宽度(mm)', null=True)),
                ('最大长度占比', models.FloatField(blank=True, null=True)),
                ('长度总和_cm_field', models.FloatField(blank=True, db_column='长度总和(cm)', null=True)),
            ],
            options={
                'db_table': 'beam baseplate y cracking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BeamSteelCorrosion',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('梁体钢筋锈蚀跨径', models.IntegerField(blank=True, null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均长度_m_field', models.FloatField(blank=True, db_column='平均长度(m)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大长度_m_field', models.FloatField(blank=True, db_column='最大长度(m)', null=True)),
                ('长度总和_m_field', models.FloatField(blank=True, db_column='长度总和(m)', null=True)),
            ],
            options={
                'db_table': 'beam steel corrosion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BeamWebplateConcreteCracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bridge_id', models.CharField(blank=True, max_length=255, null=True)),
                ('梁体腹板混凝土破损跨径', models.IntegerField(blank=True, null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均面积_m2_field', models.FloatField(blank=True, db_column='平均面积(m2)', null=True)),
                ('总面积_m2_field', models.FloatField(blank=True, db_column='总面积(m2)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大面积_m2_field', models.FloatField(blank=True, db_column='最大面积(m2)', null=True)),
            ],
            options={
                'db_table': 'beam webplate concrete cracking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BeamWebplateZCracking',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('梁体腹板竖向裂缝跨径', models.IntegerField(blank=True, null=True)),
                ('宽度总和_mm_field', models.FloatField(blank=True, db_column='宽度总和(mm)', null=True)),
                ('平均宽度_mm_field', models.FloatField(blank=True, db_column='平均宽度(mm)', null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均长度_cm_field', models.FloatField(blank=True, db_column='平均长度(cm)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大宽度_mm_field', models.FloatField(blank=True, db_column='最大宽度(mm)', null=True)),
                ('最大长度占比', models.FloatField(blank=True, null=True)),
                ('长度总和_cm_field', models.FloatField(blank=True, db_column='长度总和(cm)', null=True)),
            ],
            options={
                'db_table': 'beam webplate z cracking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BeamWingplateXCracking',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('梁体翼板横向裂缝跨径', models.IntegerField(blank=True, null=True)),
                ('宽度总和_mm_field', models.FloatField(blank=True, db_column='宽度总和(mm)', null=True)),
                ('平均宽度_mm_field', models.FloatField(blank=True, db_column='平均宽度(mm)', null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均长度_cm_field', models.FloatField(blank=True, db_column='平均长度(cm)', null=True)),
                ('平均间距', models.FloatField(blank=True, null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大宽度_mm_field', models.FloatField(blank=True, db_column='最大宽度(mm)', null=True)),
                ('最大长度_cm_field', models.FloatField(blank=True, db_column='最大长度(cm)', null=True)),
                ('长度总和_cm_field', models.FloatField(blank=True, db_column='长度总和(cm)', null=True)),
            ],
            options={
                'db_table': 'beam wingplate x cracking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BearingCracking',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('支座开裂跨径', models.IntegerField(blank=True, null=True)),
                ('宽度总和_mm_field', models.FloatField(blank=True, db_column='宽度总和(mm)', null=True)),
                ('平均宽度_mm_field', models.FloatField(blank=True, db_column='平均宽度(mm)', null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均长度_cm_field', models.FloatField(blank=True, db_column='平均长度(cm)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大宽度_mm_field', models.FloatField(blank=True, db_column='最大宽度(mm)', null=True)),
                ('最大长度_cm_field', models.FloatField(blank=True, db_column='最大长度(cm)', null=True)),
                ('长度总和_cm_field', models.FloatField(blank=True, db_column='长度总和(cm)', null=True)),
            ],
            options={
                'db_table': 'bearing cracking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BearingDeformation',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('支座变形跨径', models.IntegerField(blank=True, null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bearing deformation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BearingHanging',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('支座脱空跨径', models.IntegerField(blank=True, null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bearing hanging',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BridgeGrading',
            fields=[
                ('桥梁id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('桥梁评级', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bridge grading',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ConcreteBreakage',
            fields=[
                ('bridge_id', models.CharField(db_column='bridge id', max_length=255, primary_key=True, serialize=False)),
                ('缩缝混凝土开裂跨径', models.IntegerField(blank=True, null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均面积_m2_field', models.FloatField(blank=True, db_column='平均面积(m2)', null=True)),
                ('总面积_m2_field', models.FloatField(blank=True, db_column='总面积(m2)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大面积_m2_field', models.FloatField(blank=True, db_column='最大面积(m2)', null=True)),
            ],
            options={
                'db_table': 'concrete breakage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PierCracking',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('墩台裂缝跨径', models.IntegerField(blank=True, null=True)),
                ('宽度总和_m_field', models.FloatField(blank=True, db_column='宽度总和(m)', null=True)),
                ('平均宽度_m_field', models.FloatField(blank=True, db_column='平均宽度(m)', null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均长度_cm_field', models.FloatField(blank=True, db_column='平均长度(cm)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大宽度_m_field', models.FloatField(blank=True, db_column='最大宽度(m)', null=True)),
                ('最大长度_cm_field', models.FloatField(blank=True, db_column='最大长度(cm)', null=True)),
                ('长度总和_cm_field', models.FloatField(blank=True, db_column='长度总和(cm)', null=True)),
            ],
            options={
                'db_table': 'pier cracking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PierSteelCorrosion',
            fields=[
                ('bridge_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('墩台钢筋腐蚀跨径', models.IntegerField(blank=True, null=True)),
                ('平均数量', models.FloatField(blank=True, null=True)),
                ('平均长度_m_field', models.FloatField(blank=True, db_column='平均长度(m)', null=True)),
                ('数量', models.IntegerField(blank=True, null=True)),
                ('最大长度_m_field', models.FloatField(blank=True, db_column='最大长度(m)', null=True)),
                ('长度总和_m_field', models.FloatField(blank=True, db_column='长度总和(m)', null=True)),
            ],
            options={
                'db_table': 'pier steel corrosion',
                'managed': False,
            },
        ),
    ]
